import { NextResponse } from 'next/server';
import connectDB from '@/lib/db';
import Room from '@/models/Room';

const sampleRooms = [
  {
    name: 'Sala de Reuni√µes Principal',
    description: 'Espa√ßo amplo e moderno, ideal para reuni√µes de equipe e apresenta√ß√µes importantes.',
    capacity: 12,
    resources: ['WiFi', 'Projetor', 'Quadro Branco', 'Videoconfer√™ncia'],
    image: '/images/rooms/sala_reunioes_principal.png',
    isActive: true,
    location: 'Piso 1',
  },
  {
    name: 'Sala de Brainstorming',
    description: 'Ambiente criativo e inspirador, perfeito para sess√µes de idea√ß√£o e trabalho colaborativo.',
    capacity: 8,
    resources: ['WiFi', 'Quadro Branco', 'Post-its', 'Caf√©'],
    image: '/images/rooms/sala_brainstorming.png',
    isActive: true,
    location: 'Piso 2',
  },
  {
    name: 'Sala de Confer√™ncias',
    description: 'Sala executiva para reuni√µes formais e videoconfer√™ncias com clientes.',
    capacity: 20,
    resources: ['WiFi', 'Projetor', 'Sistema de Som', 'Videoconfer√™ncia', 'Caf√©'],
    image: '/images/rooms/sala_conferencias.png',
    isActive: true,
    location: 'Piso 3',
  },
  {
    name: 'Sala de Trabalho Colaborativo',
    description: 'Espa√ßo flex√≠vel para trabalho em equipe e workshops.',
    capacity: 15,
    resources: ['WiFi', 'Quadro Branco', 'Mesas Modulares'],
    image: '/images/rooms/sala_trabalho_colaborativo.png',
    isActive: true,
    location: 'Piso 2',
  },
  {
    name: 'Sala Privada',
    description: 'Pequeno espa√ßo reservado para reuni√µes individuais ou chamadas privadas.',
    capacity: 4,
    resources: ['WiFi', 'Monitor'],
    image: '/images/rooms/sala_privada.png',
    isActive: true,
    location: 'Piso 1',
  },
  {
    name: 'Audit√≥rio',
    description: 'Grande espa√ßo para eventos, palestras e apresenta√ß√µes para audi√™ncias maiores.',
    capacity: 50,
    resources: ['WiFi', 'Projetor', 'Sistema de Som', 'Microfones', 'Palco'],
    image: '/images/rooms/auditorio.png',
    isActive: true,
    location: 'Piso T√©rreo',
  },
];

// GET /api/seed - Popular banco de dados
export async function GET() {
  try {
    await connectDB();
    
    // Verificar se j√° existem salas
    const existingRooms = await Room.countDocuments();
    
    if (existingRooms > 0) {
      return NextResponse.json({ 
        message: `Banco j√° possui ${existingRooms} salas. Delete-as primeiro se quiser recriar.`,
        existingRooms 
      });
    }

    // Inserir salas
    const insertedRooms = await Room.insertMany(sampleRooms);
    
    return NextResponse.json({ 
      success: true,
      message: `‚úÖ ${insertedRooms.length} salas criadas com sucesso!`,
      rooms: insertedRooms 
    });
  } catch (error) {
    console.error('‚ùå Erro ao popular banco:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

// DELETE /api/seed - Limpar todas as salas (use com cuidado!)
export async function DELETE() {
  try {
    await connectDB();
    const result = await Room.deleteMany({});
    
    return NextResponse.json({ 
      success: true,
      message: `üóëÔ∏è ${result.deletedCount} salas removidas`,
      deletedCount: result.deletedCount
    });
  } catch (error) {
    console.error('‚ùå Erro ao limpar banco:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}